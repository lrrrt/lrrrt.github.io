<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu双系统配置备忘</title>
    <url>/2023/11/27/Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h1 id="双系统安装"><a href="#双系统安装" class="headerlink" title="双系统安装"></a>双系统安装</h1><p>按照<a href="https://github.com/qtjdyx/ZJUS.git">教程</a>仔细执行即可。</p>
<h2 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h2><ol>
<li>如果出现安装过程中黑屏的现象，保险起见在插入U盘后进入Bios选择Ubuntu（或者Ubuntu install）选项时即进行以下操作：<ul>
<li>由于在第一选项只有5-10s的停留时间，先按↓键给自己留点时间</li>
<li>在<code>Ubuntu</code>或者<code>Ubuntu install</code>选项选中时按下e</li>
<li>进入黑色的文本编辑页面将<code>quiet splash</code>后的<code>---</code>删去改为<code>quiet splash nomodeset</code></li>
<li>按F10开机</li>
</ul>
</li>
<li>在磁盘选择时小心选择，一定要选择<code>something else</code>和<code>free space</code>进行操作。</li>
</ol>
<h1 id="干净卸载双系统"><a href="#干净卸载双系统" class="headerlink" title="干净卸载双系统"></a>干净卸载双系统</h1><p>参考博客：<a href="https://blog.csdn.net/qq_42257666/article/details/120721561">教你彻底卸载Ubuntu双系统，去污不残留_双系统卸载ubuntu_振华OPPO的博客-CSDN博客</a></p>
<h2 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a>注意事项：</h2><ol>
<li>记不得哪几个磁盘是linux相关的话还是下载相关软件比如Linux reader进行查看，或者排除法，一般那个260M的绝对不要动。不然就是windows寄掉。</li>
<li>Bios开启顺序记得将windows调整至首位，虽然我有几次重装忘了调顺序也没关系，但是看98上好像有人寄的。</li>
<li>在格式化完磁盘以后不要偷懒而忽略后面的步骤，需要执行到在windows下用diskpart那个步骤</li>
</ol>
<h1 id="黑屏解决"><a href="#黑屏解决" class="headerlink" title="黑屏解决"></a>黑屏解决</h1><p>黑屏主要是因为和显卡冲突，也有可能是强制关机，fcitx输入法框架冲突之类的，挺玄学的。我的主要矛盾是显卡。</p>
<h2 id="型号说明"><a href="#型号说明" class="headerlink" title="型号说明"></a>型号说明</h2><p>Legion Y7000P IAH7<br>CPU               12th Gen Intel(R) Core(TM)i5-12500H<br>GPU               NVIDIA GeForce RTX 3050 Laptop GPU</p>
<h2 id="尝试过的方法"><a href="#尝试过的方法" class="headerlink" title="尝试过的方法"></a>尝试过的方法</h2><p>本台电脑在以下方法都失败了：</p>
<ol>
<li><strong>临时修改grub</strong>：在<code>Ubuntu</code>或者<code>Ubuntu install</code>选项选中时按下e<br>进入文本编辑页面将<code>quiet splash</code>后的<code>---</code>删去改为<code>quiet splash nomodeset</code>。</li>
<li><strong>root下修改grub</strong>：在开机选择页面进入Ubuntu高级选项，在recovery的root下通过vim编辑<code>/etc/default/grub</code>，将<code>quiet splash</code>改为<code>quiet splash nomodeset</code>，结果是开机黑屏或者光标停止闪烁。</li>
<li><strong>添加intel核显</strong>：进入<code>/etc/X11/Xorg.conf</code>添加intel device的section，但reboot后始终停留在tty界面，无法进入桌面，两遍尝试<code>lightdm</code>和<code>gdm3</code>始终无用，或黑屏或停留tty。</li>
<li><strong>官网下载驱动</strong>：通过临时修改grub进入的方法进入正常的图形化桌面，从官网下载NVIDIA驱动，输入<code>nvidia-smi</code>命令时可以识别，<code>software and updates</code>中也能识别强制添加的addtional driver，但是重启后仍然黑屏。</li>
</ol>
<h2 id="我成功的方案"><a href="#我成功的方案" class="headerlink" title="我成功的方案"></a>我成功的方案</h2><p>教程指路：<a href="https://www.bilibili.com/video/BV1Mg4y1p7uN/?share_source=copy_web">Ubuntu安装英伟达NVIDIA显卡驱动黑屏99%的解决办法</a><br>主要步骤（来自上面的视频，此处仅作整理，侵联删）：</p>
<ol>
<li>重装ubuntu，通过临时修改grub添加nomodeset的方法进入到图形界面。</li>
<li>打开<code>software &amp; update</code>（应该是选项偏后面的那个颜色），选择菜单栏中的<code>addtional driver</code>，选择NVIDIA的推荐驱动（最好不要用open），然后<code>apply changes</code>。</li>
<li>安装完成后restart，此时会黑屏。<code>ctrl+alt+F1-6</code>进入tty模式，输入自己的用户名和密码。</li>
<li>查看自己默认的显示管理器，我的默认是gdm3，其他电脑也可能是lightdm。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/X11/default-display-manager</span><br></pre></td></tr></table></figure></li>
<li>重启完显示管理器<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl restart gdm3</span><br></pre></td></tr></table></figure>
这样以后可以正常开机了。</li>
<li>在正常桌面中打开终端，检查显卡驱动是否正确安装，指令为<code>nvidia-smi</code>，我的输出是出现表格但是表格中没有识别出3050（up主也无法识别，不过算正常安装了）。</li>
<li>安装显卡管理应用。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install nvidia-settings nvidia-prime</span><br></pre></td></tr></table></figure></li>
<li>打开NVIDIA X Server Settings，转到Prime Profiles，换到性能模式Performance Mode，再重启电脑。</li>
<li>喝一杯，庆祝一下。</li>
</ol>
<h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>网络上的教程千千万，适合电脑的难说。很后悔以前没有记录配置wsl2远程桌面时候的操作。印象里也是有类似的问题，远程连接一直是黑屏。大概是从配完wsl的远程桌面（挺恶心的）以后起才开始留意记录配置教程指路这件事情。<br>很久没用wsl了，扔个用户名防止我忘了它（lrt_ros）</p>
]]></content>
      <categories>
        <category>配置备忘录</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>butterfly博客配置备忘</title>
    <url>/2023/11/24/butterfly%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h2 id="花瓣飘落调整"><a href="#花瓣飘落调整" class="headerlink" title="花瓣飘落调整"></a>花瓣飘落调整</h2><h3 id="花瓣数量和速度减小"><a href="#花瓣数量和速度减小" class="headerlink" title="花瓣数量和速度减小"></a>花瓣数量和速度减小</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for (var i = 0; i &lt; 30; i++) &#123;</span><br><span class="line">        var sakura, randomX, randomY, randomS, randomR, randomFnx, randomFny;</span><br><span class="line">        randomX = getRandom(&#x27;x&#x27;);</span><br><span class="line">        randomY = getRandom(&#x27;y&#x27;);</span><br><span class="line">        randomR = getRandom(&#x27;r&#x27;);</span><br><span class="line">        randomS = getRandom(&#x27;s&#x27;)*0.5;</span><br><span class="line">        randomFnx = getRandom(&#x27;fnx&#x27;);</span><br><span class="line">        randomFny = getRandom(&#x27;fny&#x27;);</span><br><span class="line">        randomFnR = getRandom(&#x27;fnr&#x27;);</span><br><span class="line">        sakura = new Sakura(randomX, randomY, randomS, randomR, &#123;</span><br><span class="line">            x: randomFnx,</span><br><span class="line">            y: randomFny,</span><br><span class="line">            r: randomFnR</span><br><span class="line">        &#125;);</span><br><span class="line">        sakura.draw(cxt);</span><br><span class="line">        sakuraList.push(sakura);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="花瓣和文章卡片的覆盖顺序"><a href="#花瓣和文章卡片的覆盖顺序" class="headerlink" title="花瓣和文章卡片的覆盖顺序"></a>花瓣和文章卡片的覆盖顺序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">canvas.setAttribute(&#x27;style&#x27;, &#x27;position: fixed;left: 0;top: 0;z-index: -1;background-color: transparent;&#x27;);</span><br><span class="line">// canvas.setAttribute(&#x27;style&#x27;, &#x27;position: fixed;left: 0;top: 0;pointer-events: none;&#x27;);</span><br></pre></td></tr></table></figure>
<h2 id="文章上锁"><a href="#文章上锁" class="headerlink" title="文章上锁"></a>文章上锁</h2><p>来源：<a href="https://zhuanlan.zhihu.com/p/113235573">https://zhuanlan.zhihu.com/p/113235573</a></p>
<ul>
<li>安装<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure></li>
<li>修改文章信息头<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: Hello World</span><br><span class="line">tags:</span><br><span class="line">- 加密文章tag</span><br><span class="line">date: 2020-03-13 21:12:21</span><br><span class="line">password: muyiio</span><br><span class="line">abstract: 这里有东西被加密了，需要输入密码查看哦。</span><br><span class="line">message: 您好，这里需要密码。</span><br><span class="line">wrong_pass_message: 抱歉，这个密码看着不太对，请再试试。</span><br><span class="line">wrong_hash_message: 抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li>
<li>修改根目录配置文件<br>添加以下字段  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安全</span><br><span class="line">encrypt: # hexo-blog-encrypt</span><br><span class="line">abstract: 这里有东西被加密了，需要输入密码查看哦。</span><br><span class="line">message: 您好, 这里需要密码.</span><br><span class="line">tags:</span><br><span class="line">- &#123;name: tagName, password: 密码A&#125;</span><br><span class="line">- &#123;name: tagName, password: 密码B&#125;</span><br><span class="line">template: &lt;div id=&quot;hexo-blog-encrypt&quot; data-wpm=&quot;&#123;&#123;hbeWrongPassMessage&#125;&#125;&quot; data-whm=&quot;&#123;&#123;hbeWrongHashMessage&#125;&#125;&quot;&gt;&lt;div class=&quot;hbe-input-container&quot;&gt;&lt;input type=&quot;password&quot; id=&quot;hbePass&quot; placeholder=&quot;&#123;&#123;hbeMessage&#125;&#125;&quot; /&gt;&lt;label&gt;&#123;&#123;hbeMessage&#125;&#125;&lt;/label&gt;&lt;div class=&quot;bottom-line&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;script id=&quot;hbeData&quot; type=&quot;hbeData&quot; data-hmacdigest=&quot;&#123;&#123;hbeHmacDigest&#125;&#125;&quot;&gt;&#123;&#123;hbeEncryptedData&#125;&#125;&lt;/script&gt;&lt;/div&gt;</span><br><span class="line">wrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.</span><br><span class="line">wrong_hash_message: 抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.</span><br></pre></td></tr></table></figure></li>
<li>但是毕竟……<br>上锁的文章算是日记本，看也没啥关系，上个锁带来心里的安全感。</li>
</ul>
]]></content>
      <categories>
        <category>配置备忘录</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch+conda+pycharm配置备忘</title>
    <url>/2023/09/24/pytorch-conda-pycharm%E9%85%8D%E7%BD%AE%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h3 id="下载conda"><a href="#下载conda" class="headerlink" title="下载conda"></a>下载conda</h3><p>miniconda和anaconda应该都是可以的，因为花书上是miniconda所以我也是装的miniconda<br>【李沐动手学深度学习Windows环境配置】 <a href="https://www.bilibili.com/video/BV1JP4y1f7q3/?share_source=copy_web&vd_source=70adbb3ab03cac7344c40785632f6bd5">https://www.bilibili.com/video/BV1JP4y1f7q3/?share_source=copy_web&amp;vd_source=70adbb3ab03cac7344c40785632f6bd5</a><br>这个是没有配GPU的</p>
<h3 id="配置GPU"><a href="#配置GPU" class="headerlink" title="配置GPU"></a>配置GPU</h3><p>CPU和GPU应该都可以，大致的过程是查阅电脑参数并选择<strong>合适自己电脑的CUDA</strong>，我这台是Y7000P RTX3050的，基本上30开头的显卡都是装11版本的CUDA，我装的是11.7CUDA<br>这个up主超级详细，简直是我的大救星！<br>【最详细的 Windows 下 PyTorch 入门深度学习环境安装与配置 CPU GPU 版 | 土堆教程】 <a href="https://www.bilibili.com/video/BV1S5411X7FY/?p=29&share_source=copy_web&vd_source=70adbb3ab03cac7344c40785632f6bd5">https://www.bilibili.com/video/BV1S5411X7FY/?p=29&amp;share_source=copy_web&amp;vd_source=70adbb3ab03cac7344c40785632f6bd5</a></p>
<h3 id="配置pytorch"><a href="#配置pytorch" class="headerlink" title="配置pytorch"></a>配置pytorch</h3><p>也是看上面这个up主（2022年的），评论也很精华！基本上可以解决，老旧版本的都有。<br>一些坑：</p>
<ul>
<li>换源！</li>
<li>中途因为某个问题我把chardet卸掉了，再装的时候失败，无法登上jupyter notebook，这边试出来是豆瓣网的trust问题，要加–trust参数，这个csdn上输一下报错就有命令的</li>
</ul>
<h3 id="conda-pycharm"><a href="#conda-pycharm" class="headerlink" title="conda+pycharm"></a>conda+pycharm</h3><p>高版本的pycharm无法识别本地interpreter，先按默认创个环境，再进setting，python interpreter，选择condabin下的conda.bat（可能anaconda和mini有区别，anaconda可能是exe？），之后load就可以选择自己的环境了。<br><a href="https://blog.csdn.net/qianyunzzz/article/details/122489967">https://blog.csdn.net/qianyunzzz/article/details/122489967</a></p>
]]></content>
      <categories>
        <category>配置备忘录</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>去种花</title>
    <url>/2023/09/19/%E5%8E%BB%E7%A7%8D%E8%8A%B1/</url>
    <content><![CDATA[<p>小林老师的摘记~<br>老师的文字总是沁人心脾~</p>
<h3 id="2023-12-29-Friday-转自狒狒同学"><a href="#2023-12-29-Friday-转自狒狒同学" class="headerlink" title="2023.12.29 Friday-转自狒狒同学"></a>2023.12.29 Friday-转自狒狒同学</h3><p>痛苦：动物处在一种不得不动用大量的精力或资源来适应性地应对来自环境或境况挑战和威胁的状态。</p>
<h3 id="2023-12-3-Sunday-完成，比完美更重要"><a href="#2023-12-3-Sunday-完成，比完美更重要" class="headerlink" title="2023.12.3 Sunday~完成，比完美更重要"></a>2023.12.3 Sunday~完成，比完美更重要</h3><p>人性最贱之处在于，在工作越紧张时、生活越艰难时，实现那些不切实际的梦想的愿望和冲动，反而更强烈了。<br>而一旦悠闲下来，失去外界的压力，创作的动力，也会随之消减，真的是莫名其妙。</p>
<h3 id="2023-12-1-Friday-此间的流浪"><a href="#2023-12-1-Friday-此间的流浪" class="headerlink" title="2023.12.1 Friday~此间的流浪"></a>2023.12.1 Friday~此间的流浪</h3><p>路上看到美妙的风景<br>却没有想告诉的人</p>
<p>不是时光在流逝<br>而是我们和这个世界<br>在一起流逝</p>
<p>后来他跑掉了<br>从此消失在丛林深处和我的生命里</p>
<p>烹雪煮茶<br>白首天涯<br>万家灯火<br>月落归家</p>
<h3 id="2023-10-20-Friday-独行也如众"><a href="#2023-10-20-Friday-独行也如众" class="headerlink" title="2023.10.20 Friday~独行也如众"></a>2023.10.20 Friday~独行也如众</h3><p>别为假期无所事事而焦虑不安<br>多两天辛苦不能让你暴富<br>但你的身心急需这两天的休息</p>
<p>希望你的小世界里<br>山花烂漫，茶酒俱全<br>安宁清淡，明朗欢愉</p>
<p>内心丰盈者，独行也如众</p>
<h3 id="2023-9-24-Sunday-人间忽晚，山河已秋"><a href="#2023-9-24-Sunday-人间忽晚，山河已秋" class="headerlink" title="2023.9.24 Sunday~人间忽晚，山河已秋"></a>2023.9.24 Sunday~人间忽晚，山河已秋</h3><p>天凉好个秋！</p>
<h3 id="2023-9-19-Tuseday-幸福不是出门多风光"><a href="#2023-9-19-Tuseday-幸福不是出门多风光" class="headerlink" title="2023.9.19 Tuseday~幸福不是出门多风光"></a>2023.9.19 Tuseday~幸福不是出门多风光</h3><p>喜欢蝴蝶 别去追逐 去种花<br>站得太久 都忘了自己在等什么<br>念旧的人 总是一身狼狈<br>以欢喜之心 渡烟火日常 念别人的好 修自己的心</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>读书炸鸡</tag>
      </tags>
  </entry>
  <entry>
    <title>托福首考记录和碎碎念</title>
    <url>/2023/11/24/%E6%89%98%E7%A6%8F%E9%A6%96%E8%80%83%E8%AE%B0%E5%BD%95%E5%92%8C%E7%A2%8E%E7%A2%8E%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="背景和碎碎念"><a href="#背景和碎碎念" class="headerlink" title="背景和碎碎念"></a>背景和碎碎念</h2><p>lz参加是的9.10早上的考试院托福。备考从7.13开始，中间还夹着各种社会实践学长组之类的（活动前后会大摆一段时间，合计下来大概有在学的时间应该算一个多月）。这次算第一次参加托福，而且还年轻，所以压力也不大（压力是不大，但焦虑还是要为2100焦虑的），没有很明确的说一定要考到什么分数，主打佛系备考，反正还要继续交钱。</p>
<p>英语情况：lz裸考四级599裸考六级591，高考结束的时候报过一个大概7天左右的托福班（文三路的肆墨教育，四个part的老师人都很好[而且也只有四个老师和一两个检查背单词收手机的助教]，水平也很高），不过这次备考没报班。</p>
<h2 id="新版考试感受"><a href="#新版考试感受" class="headerlink" title="新版考试感受"></a>新版考试感受</h2><ul>
<li><p>到达考试院</p>
<p>8：30的入场要求，鉴于第一次考和lz的龟速洗漱，6：40就起床了（想死），做地铁到文三路已经8：10了（没错就是我的问题）</p>
<p>在地铁上粗粗看了一篇阅读，复习了一下口语和写作的模板。</p>
</li>
<li><p>必备物品与考前流程</p>
<p>带<strong>确认信、身份证</strong></p>
<p>在门口根据考场拿承诺书，然后上楼放包，现在可能因为改革<strong>水也不能带</strong>了（之前看好像可以带水和吃的），纸巾也不能带，带进候场教室的<strong>只有身份证和承诺书</strong>（就是兜兜全空手里只有身份证和承诺书）。写完承诺书以后还可以去洗手间。</p>
<p>外套也可以带，不过考试过程中一脱下就要举手给老师拿到候场室不再拿回，lz本来以为可以挂椅子上（事实上绑腰上也不行），结果在大夏天裹着外套考完了emm。</p>
<p>然后就进考场拍照-&gt;分座位-&gt;等老师输密码</p>
</li>
<li><p>考试过程</p>
<ul>
<li>新版考试时长2h，8：45以后就陆续开始了。<br>  阅读之前先测耳机和麦克风，我没搞清楚麦克风怎么调，直接点了测试按钮，测出来声音low就直接跳进下一流程了，一脸懵，导致口语时一直在把麦克风往嘴边靠然后喊（对我来说的“喊”）。</li>
<li><strong>阅读</strong>：虽然早上摄入了一点阅读，但是刚开始没有进入状态，前面三题像是没睡醒做的，后来回去把前三题全改了一遍。。。第二篇快做完的时候其实已经听到别人耳机里的声音了。不过对第一篇不是很放心，在阅读游荡到时间流完。另外当时考试的时候隔壁桌的兄弟程序好像出bug了，当时戴着耳机不是很确定，大概是因为狂点导致回不去了还是黑屏好像，老师也只是说之后再看先考着，所以大家考试还是心平气和做题，<strong>慢慢点next</strong>）</li>
<li><strong>听力</strong>：前面都比较正常，在最后一篇还没听完的时候考场里已经开始有人考口语了，感觉这也很影响专注力，倒不是因为声音对听力的干扰，只是担心自己进度跟不上的焦虑（返回来看其实进度还OK的），写题目的时候会刻意听听别人咋讲，我当时听到了task1里的independence, children和task2的roof, energy，虽然给我口语有个大概的准备，但是听力做题的专注力就一般，而且平时听力结束还可以剩比较多的时间，这次听点这听点那最后写完只剩40s了，有点危险。<strong>新版听力没有OK按键</strong>。</li>
<li><strong>口语</strong>：速度在中游，努力喊就是了。</li>
<li><strong>写作</strong>：在准备界面我拖了一小会，等声音小一些。不熟悉键盘，所以是盯着键盘敲的。感觉学术讨论时间会比较紧，点也比较难想（然而这绝对又是我的备考问题）。</li>
</ul>
</li>
</ul>
<h2 id="备考忏悔"><a href="#备考忏悔" class="headerlink" title="备考忏悔"></a>备考忏悔</h2><ul>
<li><p><strong>词汇</strong>：过了一遍学科类词汇，新东方的绿本大概背到list20，最后俩星期根本没背，现在再看一下估计全忘了。虽然对考试影响不大，但是阅读能力没有上去，只是单纯地应试而已。</p>
</li>
<li><p><strong>阅读</strong>：复习方法-刷题</p>
<p>侥幸这次比较简单，前一天挑的难度稍微大一点的历史类文章做成一坨，文学话题的文章还是要多读，速度也不够。</p>
</li>
<li><p><strong>听力</strong>：复习方法-刷题精听+听youtube英文课</p>
<p>这次备考有点提升的是听力（虽然考试的时候最后注意力被口语分散了感觉不是很好），倒并不是因为刷题目。备考期间正好在学cs61b，感觉这个反而影响更明显。刚开始听课还需要开英文字幕，后面可以关掉英文字幕，然后偶尔可以接受倍速，再加上长时间的学习，相当于在听时长40min+的lecture。所以下次备考的时候可以尝试一下在youtube上听一些文学的课。听力觉得有瓶颈的大噶也可以试试去听英文的专业课，一边预习一边练听力，至少对我来说挺有用。</p>
</li>
<li><p><strong>口语</strong>：(复习不充分)复习方法-b站吴奇老师的脱口秀+刷题 </p>
<p>备考时间大概5天（越到后面越摆了），题型大致了解是看这个<a href="https://www.bilibili.com/video/BV1b7411t7Vr/?share_source=copy_web&vd_source=70adbb3ab03cac7344c40785632f6bd5">题型要求</a>，但是这里的模板感觉有点生硬，然后把<a href="https://www.bilibili.com/video/BV1dq4y1m7Av/?share_source=copy_web&vd_source=70adbb3ab03cac7344c40785632f6bd5">吴奇老师的task1</a>过了一遍，task2-4我也是看的吴奇老师，不过大概就过了15-20份左右。看几次e-rater语法和换词还有很大的提升空间。</p>
</li>
<li><p><strong>写作</strong>：(复习极不充分)好好好，就写了一份模考背了模板就上考场了，写个鸟。。</p>
<p>昨天翻邮箱看到了一年前老师发的资料，也扔在这里，不过是老版本，我也没咋看。</p>
</li>
</ul>
<h2 id="后面的碎碎念"><a href="#后面的碎碎念" class="headerlink" title="后面的碎碎念"></a>后面的碎碎念</h2><p>考前一天中午hotpot party吃太撑，晚上又因为首考嘎嘎紧张，既吃不进去也学不进去，摆烂焦虑无事就去考试院踩点了。游荡一会10点就上床碎叫了。事实证明我真的很紧张，早上1点2点3点5点都醒了一次，全部是因为自己以为已经迟到了。早上起来看到昨天朋友发来的消息又舒坦不少，“专注于当下，放下焦虑和希望”，真好真好，一下就是随缘考法。<br>考完分数出来是R30L27，另外两门也没啥期望值，趁成绩没出来先厚着脸皮水完这篇。<br>因为经验不足，考试体验可能还有点漏洞，仅作参考。祝备考的大家都都破110~</p>
]]></content>
      <tags>
        <tag>英语学习</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构基础--图</title>
    <url>/2023/12/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80-%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="Topological-Sort"><a href="#Topological-Sort" class="headerlink" title="Topological Sort"></a>Topological Sort</h1><ul>
<li>why we need topsort？<br>AOV network<br>AOE network</li>
<li>features:<ul>
<li>it must be a dag if feasible</li>
<li>a precedence relation which is both transitive(i-&gt;k,k-&gt;j,i-&gt;j) and irreflexive(i-&gt;i is impossible)</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//T=O(|V|^2)</span><br><span class="line">// :(</span><br><span class="line">void Topsort(Graph G)</span><br><span class="line">&#123;</span><br><span class="line">    Vertex V,W;</span><br><span class="line">    for(int cnt=0;cnt&lt;NumVertex;cnt++)</span><br><span class="line">    &#123;</span><br><span class="line">        V=findNewVertexOfDegreeZero();</span><br><span class="line">        if(V is not a vertex)</span><br><span class="line">        &#123;</span><br><span class="line">            Error(&quot;Graph has a cycle&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        TopNum[V]=cnt; //or output V</span><br><span class="line">        for(each W adjacent to V)</span><br><span class="line">        &#123;</span><br><span class="line">            Indegree[W]--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Topsort(Graph G)</span><br><span class="line">&#123;</span><br><span class="line">    Queue Q; // stack ok</span><br><span class="line">    int cnt=0;</span><br><span class="line">    Vertex V,W;</span><br><span class="line">    Q=CreateQueue(NumVertex);</span><br><span class="line">    MakeEmpty(Q);</span><br><span class="line">    for(each Vertex V)</span><br><span class="line">    &#123;</span><br><span class="line">        if(Indegree[V]==0)</span><br><span class="line">        &#123;</span><br><span class="line">            Enqueue(V,Q);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while(Q is not empty)</span><br><span class="line">    &#123;</span><br><span class="line">        V=Dequeue(Q);</span><br><span class="line">        TopNum[V]=cnt;</span><br><span class="line">        cnt++;</span><br><span class="line">        for(each vertex W adjacent to V)</span><br><span class="line">        &#123;</span><br><span class="line">            Indegree[W]--;</span><br><span class="line">            if(Indegree[W]==0)</span><br><span class="line">            &#123;</span><br><span class="line">                Enqueue(W,Q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(cnt!=NumVertex)</span><br><span class="line">    &#123;</span><br><span class="line">        Error(&quot;Graph has a cycle&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    Dispose(Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Shortest-Path"><a href="#Shortest-Path" class="headerlink" title="Shortest Path"></a>Shortest Path</h1><h2 id="Unweighted-Graph"><a href="#Unweighted-Graph" class="headerlink" title="Unweighted Graph"></a>Unweighted Graph</h2><h3 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">Table[i].Dist: distance from s to vi</span><br><span class="line">Table[i].Path: initialized to be 0, for tracking</span><br><span class="line">Table[i].Known: if checked</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//T=O(|V|^2)</span><br><span class="line">// :(</span><br><span class="line">void Unweighted(Table T)</span><br><span class="line">&#123;</span><br><span class="line">    int curdist;</span><br><span class="line">    Vertex V,W;</span><br><span class="line">    for(int curdis=0;curdis&lt;NumVertex;cnt++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(each Vertex V) //improvement done here</span><br><span class="line">        &#123;</span><br><span class="line">            if(T[V].Known==0 &amp;&amp; T[V].Dist=curdist)</span><br><span class="line">            &#123;</span><br><span class="line">                T[V].Known=1;</span><br><span class="line">                for(each Vertex W adjacent to V)</span><br><span class="line">                &#123;</span><br><span class="line">                    if(T[W].Dist==Infinity)</span><br><span class="line">                    &#123;</span><br><span class="line">                        T[W].Dist=T[V]+1;</span><br><span class="line">                        T[W].Path=V;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//T=O(|V|+|E|)</span><br><span class="line">void Unweighted(Table T)</span><br><span class="line">&#123;</span><br><span class="line">    Queue Q;</span><br><span class="line">    Vertex V,W;</span><br><span class="line">    Q=CreateQueue(Numvertex);</span><br><span class="line">    MakeEmpty(Q);</span><br><span class="line">    Enqueue(S,Q);</span><br><span class="line">    while(Q is not empty)</span><br><span class="line">    &#123;</span><br><span class="line">        V=Dequeue(Q);</span><br><span class="line">        T[V].Known=1; //actually not need for Known</span><br><span class="line">        for(each W adjacent to V)</span><br><span class="line">        &#123;</span><br><span class="line">            if(T[W].Dist==Infinity)</span><br><span class="line">            &#123;</span><br><span class="line">                T[W].Dist=T[V].Dist+1;</span><br><span class="line">                T[W].Path=V;</span><br><span class="line">                Enqueue(W,Q);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Dispose(Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Weighted-Graph"><a href="#Weighted-Graph" class="headerlink" title="Weighted Graph"></a>Weighted Graph</h2><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//T complexity depends how to function smallest unknown distance Vertex</span><br><span class="line">void Dijkstra(Table T)</span><br><span class="line">&#123;</span><br><span class="line">    Vertex V,W;</span><br><span class="line">    for(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        V=smallest unknown distance Vertex;</span><br><span class="line">        if(V is not Vertex)</span><br><span class="line">        &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        T[V].Known=1;</span><br><span class="line">        for(each W adjacent to V)</span><br><span class="line">        &#123;</span><br><span class="line">            if(T[W].Known==0 &amp;&amp; T[W].Dist&gt;T[V].Dist+Cvw)</span><br><span class="line">            &#123;</span><br><span class="line">                T[W].Dist=T[V].Dist+Cvw;</span><br><span class="line">                T[W].Path=V;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>How to find smallest unknown distance Vertex?</p>
<ul>
<li>Implementation1<ul>
<li>scan the table</li>
<li>T&#x3D;O(|V|^2+|E|)</li>
</ul>
</li>
<li>Implementation2<ul>
<li>keep distances in a priority queue and call deletemin, O(log|V|)</li>
<li>Decrease( T[W].Dist to T[V].Dist+Cvw );<ul>
<li>Method 1: DecreaseKey – O(log|V|)<br>T &#x3D; O(|V|log|V|+|E|log|V|) &#x3D; O(|E|log|V|)</li>
<li>Method 2: insert W with updated Dist into the priority queue<br>T &#x3D; O(|E|log|V|) but requires |E| DeleteMin with |E| space</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h3><p>worst case: O(|E|)<br>best case: O(|E||V|)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void WeightNegtive(Table T)</span><br><span class="line">&#123;</span><br><span class="line">    Queue Q=CreateQueue;</span><br><span class="line">    Vertex V,W;</span><br><span class="line">    Enqueue(Q,S);</span><br><span class="line">    while(Q is not empty)</span><br><span class="line">    &#123;</span><br><span class="line">        V=Dequeue(Q);</span><br><span class="line">        for(each W adjacent to V)</span><br><span class="line">        &#123;</span><br><span class="line">            if(T[V].Dist+Cvw&lt;T[W].Dist)</span><br><span class="line">            &#123;</span><br><span class="line">                T[W].Dist=T[V].Dist+Cvw;</span><br><span class="line">                T[W].Path=V;</span><br><span class="line">                if(W is not already in Q)</span><br><span class="line">                &#123;</span><br><span class="line">                    Enqueue(Q,W);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Dispose(Q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>How to determine whether a graph has a negative cycle?</p>
<ol>
<li>add an array called <code>cnt</code>, update <code>cnt[W]=cnt[V]+1</code> during relaxation step</li>
<li>If, at any point, there exists<code> cnt==NumVertex</code>, it indicates the presence of a negative cycle. This is because in a graph without cycles, the maximum possible value for cnt would be NumVertex - 1.</li>
</ol>
<h1 id="DAG"><a href="#DAG" class="headerlink" title="DAG"></a>DAG</h1><h2 id="AOE-network"><a href="#AOE-network" class="headerlink" title="AOE network"></a>AOE network</h2><p><strong>Example</strong><br>scheduling a project</p>
<ul>
<li>Dummy Node: A——-&gt;B——&gt;C<br>B does not need to be done before A<br>Both tasks A and B must be completed before task C can be started</li>
<li>EC time(earlist time): EC[W]&#x3D;max(EC[V]+Cvw)</li>
<li>LC time(latest time): LC[V]&#x3D;min(LC[W]-Cvw)<br><code>(V is predecessor of W)</code></li>
<li>Critical Path: the edges that have 0 slack time</li>
</ul>
<h1 id="Network-Flow"><a href="#Network-Flow" class="headerlink" title="Network Flow"></a>Network Flow</h1><p><a href="https://www.bilibili.com/video/BV1Pv41157xh">Ford-Fulkerson Algorithm</a></p>
<ol>
<li>build a residual graph; initialize the residuals to the capacities</li>
<li>while augmenting path can be found<br> a. find an augmenting path on the residual graph<br> b. find the bottleneck capacity x on the augmenting path<br> c. update the residuals<br> d. add a backward path(allow undo)</li>
</ol>
<p>Time complexity: O(f*m)(f is the max flow, m is |E|)<br>Usually, we prefer to go through the large flow first(for later convenience)</p>
<h1 id="Minimum-Spanning-Tree"><a href="#Minimum-Spanning-Tree" class="headerlink" title="Minimum Spanning Tree"></a>Minimum Spanning Tree</h1><h2 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h2><p>The Difference between Prim and Dijkstra<br>the distance to be updated</p>
<ul>
<li>Prim: just pick the lowest cost(the distance between target and <strong>visited set</strong>)</li>
<li>Dij: the distance from <strong>source</strong> to target</li>
</ul>
<h2 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Kruscal(Graph G)</span><br><span class="line">&#123;</span><br><span class="line">    T=&#123;&#125;;</span><br><span class="line">    while(T contains less than |V|-1 edges &amp;&amp; E is not empty)</span><br><span class="line">    &#123;</span><br><span class="line">        choose a least cost edge (v,w) from E; // Deletemin</span><br><span class="line">        delete(v,w) from E;</span><br><span class="line">    &#125;</span><br><span class="line">    if((v,w) does not create a cycle in T)</span><br><span class="line">    &#123;</span><br><span class="line">        add(v,w) to T; // Union Find</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        discard(v,w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if(T contains fewer than |V|-1 edges)</span><br><span class="line">    &#123;</span><br><span class="line">        Error(&quot;No Spanning Tree&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h1><p>DFS is a generation of preorder traversal</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// T=O(|E|+|V|) as long as adjacency lists are used </span><br><span class="line">void DFS(Vertex V)</span><br><span class="line">&#123;</span><br><span class="line">    visited[V]=true;</span><br><span class="line">    for(each W adjacent to V)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!visited[W])</span><br><span class="line">        &#123;</span><br><span class="line">            DFS(W);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Application1-list-components"><a href="#Application1-list-components" class="headerlink" title="Application1: list components"></a>Application1: list components</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void ListComponents ( Graph G ) </span><br><span class="line">&#123;   </span><br><span class="line">    for ( each V in G )</span><br><span class="line">    &#123; </span><br><span class="line">        if (!visited[V])</span><br><span class="line">        &#123;</span><br><span class="line">	        DFS(V);</span><br><span class="line">            printf(&quot;\n&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Application2-Bioconnectivity"><a href="#Application2-Bioconnectivity" class="headerlink" title="Application2: Bioconnectivity"></a>Application2: Bioconnectivity</h2><p><a href="https://classroom.zju.edu.cn/livingroom?course_id=53486&sub_id=1027558">class ZJU</a><br>the main point is to find articulation point</p>
<ol>
<li>use dfs to grow a minimum spanning tree and add back edge<br>some features of Num and this tree<ul>
<li>no edge connecting 2 branches of the root</li>
<li>Num gets bigger when digging down deeper on the tree</li>
</ul>
</li>
<li>the case with root and other vertex is different, you can judge manually(see ppt dfs) or use Lownum to recursively solve it(list below)</li>
</ol>
<h3 id="Tarjan"><a href="#Tarjan" class="headerlink" title="Tarjan"></a>Tarjan</h3><ol>
<li>dfs to get <code>Num</code> array storing the dfs number</li>
<li>recursively calculate Low <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Low(u)=min&#123;</span><br><span class="line">    Num(u),</span><br><span class="line">    min&#123;Low(w)|w is child of u&#125;,</span><br><span class="line">    min&#123;Num(w)|(u,w) is a back edge&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Therefore, u is an articulation point iff<ol>
<li>u is the root and has at least 2 children;  or</li>
<li>u is not the root, and has at least 1 child such that  Low( child )  Num( u ).</li>
</ol>
</li>
</ol>
<h2 id="Application3-Euler-Circuits"><a href="#Application3-Euler-Circuits" class="headerlink" title="Application3: Euler Circuits"></a>Application3: Euler Circuits</h2><ol>
<li><strong>Euler tour</strong>:<ul>
<li>Draw each line exactly once without lifting your pen from the paper </li>
<li>An Euler tour is possible if there are exactly two vertices having odd degree.  One must start at one of the odd-degree vertices.</li>
</ul>
</li>
<li><strong>Euler curcuit</strong><ul>
<li>Draw each line exactly once without lifting your pen from the paper, <strong>AND finish at the starting point</strong></li>
<li>An Euler circuit is possible only if the graph is connected and each vertex has an even degree.</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>FDS</tag>
      </tags>
  </entry>
  <entry>
    <title>模电笔记</title>
    <url>/2023/11/20/%E6%A8%A1%E7%94%B5%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>说明：现在还是习惯纸质，笔记放上来备份，毕竟一张纸一张纸的记录太容易丢了（前面一些课不知道丢了多少了）。</p>
<h1 id="电路原理（控制）笔记"><a href="#电路原理（控制）笔记" class="headerlink" title="电路原理（控制）笔记"></a>电路原理（控制）笔记</h1><p>控制学院5.5学分模电课程的前半部分。</p>
<h2 id="应试笔记"><a href="#应试笔记" class="headerlink" title="应试笔记"></a>应试笔记</h2><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><ol>
<li>参考方向，在KCLKVL的时候当然不容易错，但是放进后面的时候又会忘记了</li>
<li>功率：在关联参考方向下UI大于0是消耗，在非关联参考方向下UI大于0是产生，但是你平时写要是直接所有默认都是正的时候，是看正的UI是不是同一个方向</li>
<li>图片上画着是这个方向，但是可能大小是负的，脑子清醒一点，每个元件都有自己的参考方向！所以最后功率加起来不等于0也是正常的</li>
<li>节点电压法的时候，同一条支路上两个电阻，应该先合并这两个电阻，再求电导，而不是将其电导相加</li>
<li>在使用戴维南定理时，如果待合并的端口A里的受控源的控制量在A外面，这时候不能进行简单的开路，而是将Uab作为电源连接在完整的电路中，A外的电阻不管，但是等效的Uab还是要在。见ppt4.3.3P13</li>
<li>谐振：不同的电路结构对应的C和L可能有对应的等效，具体电路具体分析，注意参考方向</li>
<li>Q的两重定义，一个是从电抗角度，一个是从通频带的角度</li>
<li>非谐振点的影响的公式也要特别记忆一下I&#x2F;I0，至少要知道是怎么推出来的，可能电路结构不一样会有不同的公式</li>
<li>非线性电路的最大功率传输</li>
<li>互感耦合+戴维南的时候，端口开路电压，那个在边上的电感也有串联贡献，即使它自己所在路没有电流，但是别的耦合会给他电压，当然，等效出M另说</li>
<li>给你ut的表达式，写成相量形式的时候不要忘记除以根号二</li>
<li>你算出来I相量，写成表达式还是要乘根号二的</li>
<li>多频率的功率是直接相加的！有效值才是平方</li>
<li>三相：功率说得是三个元件的</li>
</ol>
<h3 id="作业题总结（期中从后往前）："><a href="#作业题总结（期中从后往前）：" class="headerlink" title="作业题总结（期中从后往前）："></a>作业题总结（期中从后往前）：</h3><ol>
<li>响应：根据公式f&#x3D;fp(t)+(f(0+)-fp(0+))e*进行解答，非正弦和直流需要先列出方程求得fp（我的误区：列方程求得的是fp不是ft，所以求完以后还是要带这个公式的）；btw温馨提醒，不要想当然的认为电容进去都是直接等于电源电压的，有受控源你的初值就寄了，哈哈。</li>
<li>奇异电路：关键看是否满足kvlkcl，有纯电容（串联无多）纯电感（并联无多）的支路留意一下，列写方程组：1）节点电荷或磁链守恒（注意正负）2）kvl或kcl</li>
<li>变压器：淡定的默认方向，正负用公式表示比较方便</li>
<li>三相交流电路：（计算-算的时候多保留几位，相差太大了）总体思路就是化成Y型然后求单相，但是注意一般功率都是三相之和，所以不要忘记条件化得单相功率，结果化得三相功率（复功率记得是乘以电流共轭，又忘又忘坏坏坏！）</li>
<li>不对称三相交流电路：在上述步骤（先当做是对称的）上根据线电压（30°）！！！求得不对称的支路电流，再运用kcl求解总电流之类的</li>
<li>三相交流电路易错点：1）求功率不要忘记三相<em>3  2）求有功功率不要忘记乘以cos  3）线电压不要忘记加30°  4）善用PQS</em>可叠加和PQS功率三角形进行求值  5）不要想当然地认为都是YY，也有可能是可合并的串联单相，电路结构还是要遇题拆题</li>
<li>多频电路求解：往往会出现谐振，但是算iL这些的时候，短路电流还是留点心眼，可能需要通过不等效的电流（合电流kcl）进行求解。也就是说，既需要分开，也需要合起来看</li>
<li>二阶电路：记牢三种情况的ode齐次解，自己规定方向时按参考方向（电感电流流入端为正，电容电流流入端为正），步骤为1）写初值 2）根据kclkvl写ode 3）解odes1s2,根据初值待定系数求得A1A2</li>
<li>非线性电路端口特性：注意钳制（这个因为答案略，所以还不是很确定套路）</li>
<li>小信号分析法：注意小信号是正是负，易忽略。步骤为1）小信号置零，求直流作用工作点  2）直流置零，利用动态电阻（求导）求分量  3）两个相加</li>
</ol>
<h2 id="课堂笔记"><a href="#课堂笔记" class="headerlink" title="课堂笔记"></a>课堂笔记</h2>

	<div class="row">
    <embed src="/pdf/电路笔记.pdf" width="100%" height="550" type="application/pdf">
	</div>






<h1 id="模拟电路（控制）笔记"><a href="#模拟电路（控制）笔记" class="headerlink" title="模拟电路（控制）笔记"></a>模拟电路（控制）笔记</h1><p>控制学院5.5学分模电课程的后半部分。</p>
<h2 id="整理笔记"><a href="#整理笔记" class="headerlink" title="整理笔记"></a>整理笔记</h2><h3 id="器件部分"><a href="#器件部分" class="headerlink" title="器件部分"></a>器件部分</h3>

	<div class="row">
    <embed src="/pdf/器件部分.pdf" width="100%" height="550" type="application/pdf">
	</div>



<h3 id="三组态"><a href="#三组态" class="headerlink" title="三组态"></a>三组态</h3>

	<div class="row">
    <embed src="/pdf/三组态.pdf" width="100%" height="550" type="application/pdf">
	</div>


]]></content>
      <categories>
        <category>课程笔记</category>
      </categories>
      <tags>
        <tag>模电</tag>
      </tags>
  </entry>
  <entry>
    <title>秋冬依然燥烫的紫金港</title>
    <url>/2023/09/06/%E7%A7%8B%E5%86%AC%E4%BE%9D%E7%84%B6%E7%87%A5%E7%83%AB%E7%9A%84%E7%B4%AB%E9%87%91%E6%B8%AF/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="c2b96755376920ca8261adbc54f77b8f6917d320f87e18fb790f38a5db5294e5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">嘿嘿，需要密码~</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>碎碎念</tag>
      </tags>
  </entry>
</search>
